name: PHP code analysis

on:
    workflow_call:
        inputs:
            plugin-name:
                required: true
                type: string
            legacy-plugin:
                required: false
                type: boolean
                default: false
            # Target can be: Core, Frontend, Backend. Requires legacy-plugin to be true
            legacy-plugin-target:
                required: false
                type: string

jobs:
    php-code-analysis:
        name: Code analysis for ${{ inputs.plugin-name }}
        runs-on: ubuntu-latest
        env:
            PLUGIN_NAME: ${{ inputs.plugin-name }}
            LEGACY_PLUGIN: ${{ inputs.legacy-plugin }}
            LEGACY_PLUGIN_TARGET: ${{ inputs.legacy-plugin-target }}

        container:
            image: ghcr.io/shopware5/docker-images-testing/install:shopware_5.7_8.0_7.4_none
            credentials:
                username: ${{ github.actor }}
                password: ${{ secrets.github_token }}

        steps:
            -   name: Check if plugin is legacy with target
                run: |
                    targets="Core Frontend Backend"
                    if [ ${{ env.LEGACY_PLUGIN }} = true ]; then
                        if [ ! -z "${{ env.LEGACY_PLUGIN_TARGET }}" ]; then
                             for target in $targets; do
                                if [ $target = ${{ env.LEGACY_PLUGIN_TARGET }} ]
                                then
                                    echo "Target set!"
                                    exit 0
                                fi
                            done
                            echo 'Wrong target has been set! Please set the github action input "legacy-plugin-target" to "Core", "Backend", "Frontend"'
                            exit 1
                        fi

                        echo 'No target has been set! Please set the github action input "legacy-plugin-target" to "Core", "Backend", "Frontend"'
                        exit 1
                    fi
                    echo "Not a legacy plugin"

            -   run: /usr/bin/supervisord -c /etc/supervisord.conf &

            -   name: Checkout ${{ env.PLUGIN_NAME }}
                uses: actions/checkout@v3
                with:
                    path: plugin
            -   name: Move plugin
                run: |
                    if [ ${{ env.LEGACY_PLUGIN }} = true ]; then
                        mv "$(pwd)/plugin" /shopware/engine/Shopware/Plugins/Local/${{ env.LEGACY_PLUGIN_TARGET }}/${{ env.PLUGIN_NAME }}
                    else
                        mv "$(pwd)/plugin" /shopware/custom/plugins/${{ env.PLUGIN_NAME }}
                    fi

            -   name: Get Composer Cache Directory
                id: composer-cache
                run: |
                    if [ ${{ env.LEGACY_PLUGIN }} = true ]; then
                        cd /shopware/engine/Shopware/Plugins/Local/${{ env.LEGACY_PLUGIN_TARGET }}/${{ env.PLUGIN_NAME }}
                    else
                        cd /shopware/custom/plugins/${{ env.PLUGIN_NAME }}
                    fi

                    echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

            -   uses: actions/cache@v3
                with:
                    path: ${{ steps.composer-cache.outputs.dir }}
                    key: ${{ runner.os }}-composer-${{ env.PLUGIN_NAME }}
                    restore-keys: |
                        ${{ runner.os }}-composer-

            -   name: Setup ${{ env.PLUGIN_NAME }}
                run: |
                    if [ ${{ env.LEGACY_PLUGIN }} = true ]; then
                        cd /shopware/engine/Shopware/Plugins/Local/${{ env.LEGACY_PLUGIN_TARGET }}/${{ env.PLUGIN_NAME }}
                    else
                        cd /shopware/custom/plugins/${{ env.PLUGIN_NAME }}
                    fi

                    if [ "$(make -p | grep 'composer-install:')" = "composer-install:" ]; then
                        make composer-install
                    else
                        echo "No composer-install command found. This is fine if you do not expect that command to exist!"
                    fi

                    make install-plugin

            -   name: Execute PHP Code-Style-fixer
                run: |
                    if [ ${{ env.LEGACY_PLUGIN }} = true ]; then
                        cd /shopware/engine/Shopware/Plugins/Local/${{ env.LEGACY_PLUGIN_TARGET }}/${{ env.PLUGIN_NAME }}
                    else
                        cd /shopware/custom/plugins/${{ env.PLUGIN_NAME }}
                    fi
                    make fix-cs-dry

            -   name: Check for PHP-Stan
                run: |
                    if [ ${{ env.LEGACY_PLUGIN }} = true ]; then
                        cd /shopware/engine/Shopware/Plugins/Local/${{ env.LEGACY_PLUGIN_TARGET }}/${{ env.PLUGIN_NAME }}
                    else
                        cd /shopware/custom/plugins/${{ env.PLUGIN_NAME }}
                    fi

                    if [ "$(make -p | grep 'phpstan:')" = "phpstan:" ]; then
                        echo "PHPSTAN_EXISTS=true" >> $GITHUB_ENV
                    else
                        echo "No phpstan command found in the Makefile. If the command is declared in the Makefile you have an error!"
                        echo "PHPSTAN_EXISTS=false" >> $GITHUB_ENV
                    fi

            -   name: Execute PHP-Stan
                if: ${{ env.PHPSTAN_EXISTS == true }}
                run: |
                    cd /shopware
                    php bin/console -e production -q # Initialise DIC (var/cache/production____REVISION____) for phpstan
                    if [ ${{ env.LEGACY_PLUGIN }} = true ]; then
                        cd /shopware/engine/Shopware/Plugins/Local/${{ env.LEGACY_PLUGIN_TARGET }}/${{ env.PLUGIN_NAME }}
                    else
                        cd /shopware/custom/plugins/${{ env.PLUGIN_NAME }}
                    fi
                    make phpstan
